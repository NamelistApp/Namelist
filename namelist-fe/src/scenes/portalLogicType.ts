// Generated by kea-typegen on Tue, 31 Dec 2024 07:36:57 GMT. DO NOT EDIT THIS FILE MANUALLY.

import type { Logic } from 'kea'

import type { Portal } from '../core/types'

export interface portalLogicType extends Logic {
    actionCreators: {
        loadCurrentPortal: () => ({
            type: "load current portal (scenes.portalLogic)";
            payload: any;
        });
        loadCurrentPortalSuccess: (currentPortal: Portal | null, payload?: any) => ({
            type: "load current portal success (scenes.portalLogic)";
            payload: {
                currentPortal: Portal | null;
                payload?: any;
            };
        });
        loadCurrentPortalFailure: (error: string, errorObject?: any) => ({
            type: "load current portal failure (scenes.portalLogic)";
            payload: {
                error: string;
                errorObject?: any;
            };
        });
    };
    actionKeys: {
        "load current portal (scenes.portalLogic)": "loadCurrentPortal";
        "load current portal success (scenes.portalLogic)": "loadCurrentPortalSuccess";
        "load current portal failure (scenes.portalLogic)": "loadCurrentPortalFailure";
    };
    actionTypes: {
        loadCurrentPortal: "load current portal (scenes.portalLogic)";
        loadCurrentPortalSuccess: "load current portal success (scenes.portalLogic)";
        loadCurrentPortalFailure: "load current portal failure (scenes.portalLogic)";
    };
    actions: {
        loadCurrentPortal: () => void;
        loadCurrentPortalSuccess: (currentPortal: Portal | null, payload?: any) => void;
        loadCurrentPortalFailure: (error: string, errorObject?: any) => void;
    };
    asyncActions: {
        loadCurrentPortal: () => Promise<any>;
        loadCurrentPortalSuccess: (currentPortal: Portal | null, payload?: any) => Promise<any>;
        loadCurrentPortalFailure: (error: string, errorObject?: any) => Promise<any>;
    };
    defaults: {
        currentPortal: Portal | null;
        currentPortalLoading: boolean;
    };
    events: {};
    key: undefined;
    listeners: {
        "loadCurrentPortalSuccess": ((action: {
            type: "load current portal success (scenes.portalLogic)";
            payload: {
                currentPortal: Portal | null;
                payload?: any;
            };
        }, previousState: any) => void | Promise<void>)[];
    };
    path: [
        "scenes",
        "portalLogic"
    ];
    pathString: "scenes.portalLogic";
    props: Record<string, unknown>;
    reducer: (state: any, action: any, fullState: any) => {
        currentPortal: Portal | null;
        currentPortalLoading: boolean;
    };
    reducers: {
        currentPortal: (state: Portal | null, action: any, fullState: any) => Portal | null;
        currentPortalLoading: (state: boolean, action: any, fullState: any) => boolean;
    };
    selector: (state: any) => {
        currentPortal: Portal | null;
        currentPortalLoading: boolean;
    };
    selectors: {
        currentPortal: (state: any, props?: any) => Portal | null;
        currentPortalLoading: (state: any, props?: any) => boolean;
        currentPortalId: (state: any, props?: any) => number | null;
    };
    sharedListeners: {};
    values: {
        currentPortal: Portal | null;
        currentPortalLoading: boolean;
        currentPortalId: number | null;
    };
    _isKea: true;
    _isKeaWithKey: false;
    __keaTypeGenInternalSelectorTypes: {
        currentPortalId: (currentPortal: Portal | null) => number | null;
    };
}