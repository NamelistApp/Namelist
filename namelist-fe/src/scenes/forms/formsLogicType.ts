// Generated by kea-typegen on Tue, 14 Jan 2025 05:16:59 GMT. DO NOT EDIT THIS FILE MANUALLY.

import type { Logic } from 'kea'

import type { Paginated } from '../../core/api'
import type { Form } from './data/form-models'

export interface formsLogicType extends Logic {
    actionCreators: {
        loadForms: () => ({
            type: "load forms (scenes.forms.formsLogic)";
            payload: any;
        });
        loadFormsSuccess: (forms: Paginated<Form>, payload?: any) => ({
            type: "load forms success (scenes.forms.formsLogic)";
            payload: {
                forms: Paginated<Form>;
                payload?: any;
            };
        });
        loadFormsFailure: (error: string, errorObject?: any) => ({
            type: "load forms failure (scenes.forms.formsLogic)";
            payload: {
                error: string;
                errorObject?: any;
            };
        });
    };
    actionKeys: {
        "load forms (scenes.forms.formsLogic)": "loadForms";
        "load forms success (scenes.forms.formsLogic)": "loadFormsSuccess";
        "load forms failure (scenes.forms.formsLogic)": "loadFormsFailure";
    };
    actionTypes: {
        loadForms: "load forms (scenes.forms.formsLogic)";
        loadFormsSuccess: "load forms success (scenes.forms.formsLogic)";
        loadFormsFailure: "load forms failure (scenes.forms.formsLogic)";
    };
    actions: {
        loadForms: () => void;
        loadFormsSuccess: (forms: Paginated<Form>, payload?: any) => void;
        loadFormsFailure: (error: string, errorObject?: any) => void;
    };
    asyncActions: {
        loadForms: () => Promise<any>;
        loadFormsSuccess: (forms: Paginated<Form>, payload?: any) => Promise<any>;
        loadFormsFailure: (error: string, errorObject?: any) => Promise<any>;
    };
    defaults: {
        forms: Paginated<Form>;
        page: number;
        formsLoading: boolean;
    };
    events: {};
    key: undefined;
    listeners: {};
    path: [
        "scenes",
        "forms",
        "formsLogic"
    ];
    pathString: "scenes.forms.formsLogic";
    props: Record<string, unknown>;
    reducer: (state: any, action: any, fullState: any) => {
        forms: Paginated<Form>;
        page: number;
        formsLoading: boolean;
    };
    reducers: {
        forms: (state: Paginated<Form>, action: any, fullState: any) => Paginated<Form>;
        page: (state: number, action: any, fullState: any) => number;
        formsLoading: (state: boolean, action: any, fullState: any) => boolean;
    };
    selector: (state: any) => {
        forms: Paginated<Form>;
        page: number;
        formsLoading: boolean;
    };
    selectors: {
        forms: (state: any, props?: any) => Paginated<Form>;
        page: (state: any, props?: any) => number;
        formsLoading: (state: any, props?: any) => boolean;
    };
    sharedListeners: {};
    values: {
        forms: Paginated<Form>;
        page: number;
        formsLoading: boolean;
    };
    _isKea: true;
    _isKeaWithKey: false;
}