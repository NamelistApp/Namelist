// Generated by kea-typegen on Sat, 18 Jan 2025 05:17:02 GMT. DO NOT EDIT THIS FILE MANUALLY.

import type { Logic } from 'kea'

import type { CrmFormSceneProps } from './Form'
import type { DateRange } from '../../lib/utils'
import type { Form, FormStats } from './data/form-models'

export interface formLogicType extends Logic {
    actionCreators: {
        setDateRange: (dateRange: DateRange) => ({
            type: "set date range (scenes.forms.crmFormLogic.*)";
            payload: DateRange;
        });
        loadForm: (formId?: any) => ({
            type: "load form (scenes.forms.crmFormLogic.*)";
            payload: any;
        });
        loadFormSuccess: (form: Form, payload?: any) => ({
            type: "load form success (scenes.forms.crmFormLogic.*)";
            payload: {
                form: Form;
                payload?: any;
            };
        });
        loadFormFailure: (error: string, errorObject?: any) => ({
            type: "load form failure (scenes.forms.crmFormLogic.*)";
            payload: {
                error: string;
                errorObject?: any;
            };
        });
        loadFormStats: (formId?: any) => ({
            type: "load form stats (scenes.forms.crmFormLogic.*)";
            payload: any;
        });
        loadFormStatsSuccess: (formStats: FormStats, payload?: any) => ({
            type: "load form stats success (scenes.forms.crmFormLogic.*)";
            payload: {
                formStats: FormStats;
                payload?: any;
            };
        });
        loadFormStatsFailure: (error: string, errorObject?: any) => ({
            type: "load form stats failure (scenes.forms.crmFormLogic.*)";
            payload: {
                error: string;
                errorObject?: any;
            };
        });
    };
    actionKeys: {
        "set date range (scenes.forms.crmFormLogic.*)": "setDateRange";
        "load form (scenes.forms.crmFormLogic.*)": "loadForm";
        "load form success (scenes.forms.crmFormLogic.*)": "loadFormSuccess";
        "load form failure (scenes.forms.crmFormLogic.*)": "loadFormFailure";
        "load form stats (scenes.forms.crmFormLogic.*)": "loadFormStats";
        "load form stats success (scenes.forms.crmFormLogic.*)": "loadFormStatsSuccess";
        "load form stats failure (scenes.forms.crmFormLogic.*)": "loadFormStatsFailure";
    };
    actionTypes: {
        setDateRange: "set date range (scenes.forms.crmFormLogic.*)";
        loadForm: "load form (scenes.forms.crmFormLogic.*)";
        loadFormSuccess: "load form success (scenes.forms.crmFormLogic.*)";
        loadFormFailure: "load form failure (scenes.forms.crmFormLogic.*)";
        loadFormStats: "load form stats (scenes.forms.crmFormLogic.*)";
        loadFormStatsSuccess: "load form stats success (scenes.forms.crmFormLogic.*)";
        loadFormStatsFailure: "load form stats failure (scenes.forms.crmFormLogic.*)";
    };
    actions: {
        setDateRange: (dateRange: DateRange) => void;
        loadForm: (formId?: any) => void;
        loadFormSuccess: (form: Form, payload?: any) => void;
        loadFormFailure: (error: string, errorObject?: any) => void;
        loadFormStats: (formId?: any) => void;
        loadFormStatsSuccess: (formStats: FormStats, payload?: any) => void;
        loadFormStatsFailure: (error: string, errorObject?: any) => void;
    };
    asyncActions: {
        setDateRange: (dateRange: DateRange) => Promise<any>;
        loadForm: (formId?: any) => Promise<any>;
        loadFormSuccess: (form: Form, payload?: any) => Promise<any>;
        loadFormFailure: (error: string, errorObject?: any) => Promise<any>;
        loadFormStats: (formId?: any) => Promise<any>;
        loadFormStatsSuccess: (formStats: FormStats, payload?: any) => Promise<any>;
        loadFormStatsFailure: (error: string, errorObject?: any) => Promise<any>;
    };
    defaults: {
        dateRange: DateRange;
        form: Form;
        formLoading: boolean;
        formStats: FormStats;
        formStatsLoading: boolean;
    };
    events: {};
    key: string;
    listeners: {
        "setDateRange": ((action: {
            type: "set date range (scenes.forms.crmFormLogic.*)";
            payload: DateRange;
        }, previousState: any) => void | Promise<void>)[];
    };
    path: [
        "scenes",
        "forms",
        "crmFormLogic",
        "*"
    ];
    pathString: "scenes.forms.crmFormLogic.*";
    props: CrmFormSceneProps;
    reducer: (state: any, action: any, fullState: any) => {
        dateRange: DateRange;
        form: Form;
        formLoading: boolean;
        formStats: FormStats;
        formStatsLoading: boolean;
    };
    reducers: {
        dateRange: (state: DateRange, action: any, fullState: any) => DateRange;
        form: (state: Form, action: any, fullState: any) => Form;
        formLoading: (state: boolean, action: any, fullState: any) => boolean;
        formStats: (state: FormStats, action: any, fullState: any) => FormStats;
        formStatsLoading: (state: boolean, action: any, fullState: any) => boolean;
    };
    selector: (state: any) => {
        dateRange: DateRange;
        form: Form;
        formLoading: boolean;
        formStats: FormStats;
        formStatsLoading: boolean;
    };
    selectors: {
        dateRange: (state: any, props?: any) => DateRange;
        form: (state: any, props?: any) => Form;
        formLoading: (state: any, props?: any) => boolean;
        formStats: (state: any, props?: any) => FormStats;
        formStatsLoading: (state: any, props?: any) => boolean;
        formId: (state: any, props?: any) => string;
    };
    sharedListeners: {};
    values: {
        dateRange: DateRange;
        form: Form;
        formLoading: boolean;
        formStats: FormStats;
        formStatsLoading: boolean;
        formId: string;
    };
    _isKea: true;
    _isKeaWithKey: true;
    __keaTypeGenInternalSelectorTypes: {
        formId: (arg: any) => string;
    };
}