// Generated by kea-typegen on Tue, 14 Jan 2025 16:47:53 GMT. DO NOT EDIT THIS FILE MANUALLY.

import type { Logic } from 'kea'

import type { CreateFormProps } from './createFormLogic'
import type { CreateFormRequest } from '../data/form-models'
import type { DeepPartial, DeepPartialMap, FieldName, ValidationErrorType } from 'kea-forms'

export interface createFormLogicType extends Logic {
    actionCreators: {
        setCrmFormValue: (key: FieldName, value: any) => ({
            type: "set crm form value (scenes.forms.create.createFormLogic)";
            payload: {
                name: FieldName;
                value: any;
            };
        });
        setCrmFormValues: (values: DeepPartial<CreateFormRequest>) => ({
            type: "set crm form values (scenes.forms.create.createFormLogic)";
            payload: {
                values: DeepPartial<CreateFormRequest>;
            };
        });
        setCrmFormManualErrors: (errors: Record<string, any>) => ({
            type: "set crm form manual errors (scenes.forms.create.createFormLogic)";
            payload: {
                errors: Record<string, any>;
            };
        });
        touchCrmFormField: (key: string) => ({
            type: "touch crm form field (scenes.forms.create.createFormLogic)";
            payload: {
                key: string;
            };
        });
        resetCrmForm: (values?: CreateFormRequest) => ({
            type: "reset crm form (scenes.forms.create.createFormLogic)";
            payload: {
                values?: CreateFormRequest;
            };
        });
        submitCrmForm: () => ({
            type: "submit crm form (scenes.forms.create.createFormLogic)";
            payload: {
                value: boolean;
            };
        });
        submitCrmFormRequest: (crmForm: CreateFormRequest) => ({
            type: "submit crm form request (scenes.forms.create.createFormLogic)";
            payload: {
                crmForm: CreateFormRequest;
            };
        });
        submitCrmFormSuccess: (crmForm: CreateFormRequest) => ({
            type: "submit crm form success (scenes.forms.create.createFormLogic)";
            payload: {
                crmForm: CreateFormRequest;
            };
        });
        submitCrmFormFailure: (error: Error, errors: Record<string, any>) => ({
            type: "submit crm form failure (scenes.forms.create.createFormLogic)";
            payload: {
                error: Error;
                errors: Record<string, any>;
            };
        });
    };
    actionKeys: {
        "set crm form value (scenes.forms.create.createFormLogic)": "setCrmFormValue";
        "set crm form values (scenes.forms.create.createFormLogic)": "setCrmFormValues";
        "set crm form manual errors (scenes.forms.create.createFormLogic)": "setCrmFormManualErrors";
        "touch crm form field (scenes.forms.create.createFormLogic)": "touchCrmFormField";
        "reset crm form (scenes.forms.create.createFormLogic)": "resetCrmForm";
        "submit crm form (scenes.forms.create.createFormLogic)": "submitCrmForm";
        "submit crm form request (scenes.forms.create.createFormLogic)": "submitCrmFormRequest";
        "submit crm form success (scenes.forms.create.createFormLogic)": "submitCrmFormSuccess";
        "submit crm form failure (scenes.forms.create.createFormLogic)": "submitCrmFormFailure";
    };
    actionTypes: {
        setCrmFormValue: "set crm form value (scenes.forms.create.createFormLogic)";
        setCrmFormValues: "set crm form values (scenes.forms.create.createFormLogic)";
        setCrmFormManualErrors: "set crm form manual errors (scenes.forms.create.createFormLogic)";
        touchCrmFormField: "touch crm form field (scenes.forms.create.createFormLogic)";
        resetCrmForm: "reset crm form (scenes.forms.create.createFormLogic)";
        submitCrmForm: "submit crm form (scenes.forms.create.createFormLogic)";
        submitCrmFormRequest: "submit crm form request (scenes.forms.create.createFormLogic)";
        submitCrmFormSuccess: "submit crm form success (scenes.forms.create.createFormLogic)";
        submitCrmFormFailure: "submit crm form failure (scenes.forms.create.createFormLogic)";
    };
    actions: {
        setCrmFormValue: (key: FieldName, value: any) => void;
        setCrmFormValues: (values: DeepPartial<CreateFormRequest>) => void;
        setCrmFormManualErrors: (errors: Record<string, any>) => void;
        touchCrmFormField: (key: string) => void;
        resetCrmForm: (values?: CreateFormRequest) => void;
        submitCrmForm: () => void;
        submitCrmFormRequest: (crmForm: CreateFormRequest) => void;
        submitCrmFormSuccess: (crmForm: CreateFormRequest) => void;
        submitCrmFormFailure: (error: Error, errors: Record<string, any>) => void;
    };
    asyncActions: {
        setCrmFormValue: (key: FieldName, value: any) => Promise<any>;
        setCrmFormValues: (values: DeepPartial<CreateFormRequest>) => Promise<any>;
        setCrmFormManualErrors: (errors: Record<string, any>) => Promise<any>;
        touchCrmFormField: (key: string) => Promise<any>;
        resetCrmForm: (values?: CreateFormRequest) => Promise<any>;
        submitCrmForm: () => Promise<any>;
        submitCrmFormRequest: (crmForm: CreateFormRequest) => Promise<any>;
        submitCrmFormSuccess: (crmForm: CreateFormRequest) => Promise<any>;
        submitCrmFormFailure: (error: Error, errors: Record<string, any>) => Promise<any>;
    };
    defaults: {
        crmForm: CreateFormRequest;
        isCrmFormSubmitting: boolean;
        showCrmFormErrors: boolean;
        crmFormChanged: boolean;
        crmFormTouches: Record<string, boolean>;
        crmFormManualErrors: Record<string, any>;
    };
    events: {};
    key: undefined;
    listeners: {};
    path: [
        "scenes",
        "forms",
        "create",
        "createFormLogic"
    ];
    pathString: "scenes.forms.create.createFormLogic";
    props: CreateFormProps;
    reducer: (state: any, action: any, fullState: any) => {
        crmForm: CreateFormRequest;
        isCrmFormSubmitting: boolean;
        showCrmFormErrors: boolean;
        crmFormChanged: boolean;
        crmFormTouches: Record<string, boolean>;
        crmFormManualErrors: Record<string, any>;
    };
    reducers: {
        crmForm: (state: CreateFormRequest, action: any, fullState: any) => CreateFormRequest;
        isCrmFormSubmitting: (state: boolean, action: any, fullState: any) => boolean;
        showCrmFormErrors: (state: boolean, action: any, fullState: any) => boolean;
        crmFormChanged: (state: boolean, action: any, fullState: any) => boolean;
        crmFormTouches: (state: Record<string, boolean>, action: any, fullState: any) => Record<string, boolean>;
        crmFormManualErrors: (state: Record<string, any>, action: any, fullState: any) => Record<string, any>;
    };
    selector: (state: any) => {
        crmForm: CreateFormRequest;
        isCrmFormSubmitting: boolean;
        showCrmFormErrors: boolean;
        crmFormChanged: boolean;
        crmFormTouches: Record<string, boolean>;
        crmFormManualErrors: Record<string, any>;
    };
    selectors: {
        crmForm: (state: any, props?: any) => CreateFormRequest;
        isCrmFormSubmitting: (state: any, props?: any) => boolean;
        showCrmFormErrors: (state: any, props?: any) => boolean;
        crmFormChanged: (state: any, props?: any) => boolean;
        crmFormTouches: (state: any, props?: any) => Record<string, boolean>;
        crmFormManualErrors: (state: any, props?: any) => Record<string, any>;
        crmFormTouched: (state: any, props?: any) => boolean;
        crmFormValidationErrors: (state: any, props?: any) => DeepPartialMap<CreateFormRequest, ValidationErrorType>;
        crmFormAllErrors: (state: any, props?: any) => Record<string, any>;
        crmFormHasErrors: (state: any, props?: any) => boolean;
        crmFormErrors: (state: any, props?: any) => DeepPartialMap<CreateFormRequest, ValidationErrorType>;
        isCrmFormValid: (state: any, props?: any) => boolean;
    };
    sharedListeners: {};
    values: {
        crmForm: CreateFormRequest;
        isCrmFormSubmitting: boolean;
        showCrmFormErrors: boolean;
        crmFormChanged: boolean;
        crmFormTouches: Record<string, boolean>;
        crmFormManualErrors: Record<string, any>;
        crmFormTouched: boolean;
        crmFormValidationErrors: DeepPartialMap<CreateFormRequest, ValidationErrorType>;
        crmFormAllErrors: Record<string, any>;
        crmFormHasErrors: boolean;
        crmFormErrors: DeepPartialMap<CreateFormRequest, ValidationErrorType>;
        isCrmFormValid: boolean;
    };
    _isKea: true;
    _isKeaWithKey: false;
}