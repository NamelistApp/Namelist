// Generated by kea-typegen on Tue, 14 Jan 2025 20:19:04 GMT. DO NOT EDIT THIS FILE MANUALLY.

import type { Logic } from 'kea'

import type { CreateFormProps } from './createFormLogic'
import type { CreateFormRequest } from '../data/form-models'
import type { DeepPartial, DeepPartialMap, FieldName, ValidationErrorType } from 'kea-forms'

export interface createFormLogicType extends Logic {
    actionCreators: {
        loadForms: () => ({
            type: "load forms (scenes.forms.create.createFormLogic)";
            payload: any;
        });
        setCreateCrmFormValue: (key: FieldName, value: any) => ({
            type: "set create crm form value (scenes.forms.create.createFormLogic)";
            payload: {
                name: FieldName;
                value: any;
            };
        });
        setCreateCrmFormValues: (values: DeepPartial<CreateFormRequest>) => ({
            type: "set create crm form values (scenes.forms.create.createFormLogic)";
            payload: {
                values: DeepPartial<CreateFormRequest>;
            };
        });
        setCreateCrmFormManualErrors: (errors: Record<string, any>) => ({
            type: "set create crm form manual errors (scenes.forms.create.createFormLogic)";
            payload: {
                errors: Record<string, any>;
            };
        });
        touchCreateCrmFormField: (key: string) => ({
            type: "touch create crm form field (scenes.forms.create.createFormLogic)";
            payload: {
                key: string;
            };
        });
        resetCreateCrmForm: (values?: CreateFormRequest) => ({
            type: "reset create crm form (scenes.forms.create.createFormLogic)";
            payload: {
                values?: CreateFormRequest;
            };
        });
        submitCreateCrmForm: () => ({
            type: "submit create crm form (scenes.forms.create.createFormLogic)";
            payload: {
                value: boolean;
            };
        });
        submitCreateCrmFormRequest: (createCrmForm: CreateFormRequest) => ({
            type: "submit create crm form request (scenes.forms.create.createFormLogic)";
            payload: {
                createCrmForm: CreateFormRequest;
            };
        });
        submitCreateCrmFormSuccess: (createCrmForm: CreateFormRequest) => ({
            type: "submit create crm form success (scenes.forms.create.createFormLogic)";
            payload: {
                createCrmForm: CreateFormRequest;
            };
        });
        submitCreateCrmFormFailure: (error: Error, errors: Record<string, any>) => ({
            type: "submit create crm form failure (scenes.forms.create.createFormLogic)";
            payload: {
                error: Error;
                errors: Record<string, any>;
            };
        });
    };
    actionKeys: {
        "load forms (scenes.forms.create.createFormLogic)": "loadForms";
        "set create crm form value (scenes.forms.create.createFormLogic)": "setCreateCrmFormValue";
        "set create crm form values (scenes.forms.create.createFormLogic)": "setCreateCrmFormValues";
        "set create crm form manual errors (scenes.forms.create.createFormLogic)": "setCreateCrmFormManualErrors";
        "touch create crm form field (scenes.forms.create.createFormLogic)": "touchCreateCrmFormField";
        "reset create crm form (scenes.forms.create.createFormLogic)": "resetCreateCrmForm";
        "submit create crm form (scenes.forms.create.createFormLogic)": "submitCreateCrmForm";
        "submit create crm form request (scenes.forms.create.createFormLogic)": "submitCreateCrmFormRequest";
        "submit create crm form success (scenes.forms.create.createFormLogic)": "submitCreateCrmFormSuccess";
        "submit create crm form failure (scenes.forms.create.createFormLogic)": "submitCreateCrmFormFailure";
    };
    actionTypes: {
        loadForms: "load forms (scenes.forms.create.createFormLogic)";
        setCreateCrmFormValue: "set create crm form value (scenes.forms.create.createFormLogic)";
        setCreateCrmFormValues: "set create crm form values (scenes.forms.create.createFormLogic)";
        setCreateCrmFormManualErrors: "set create crm form manual errors (scenes.forms.create.createFormLogic)";
        touchCreateCrmFormField: "touch create crm form field (scenes.forms.create.createFormLogic)";
        resetCreateCrmForm: "reset create crm form (scenes.forms.create.createFormLogic)";
        submitCreateCrmForm: "submit create crm form (scenes.forms.create.createFormLogic)";
        submitCreateCrmFormRequest: "submit create crm form request (scenes.forms.create.createFormLogic)";
        submitCreateCrmFormSuccess: "submit create crm form success (scenes.forms.create.createFormLogic)";
        submitCreateCrmFormFailure: "submit create crm form failure (scenes.forms.create.createFormLogic)";
    };
    actions: {
        loadForms: () => void;
        setCreateCrmFormValue: (key: FieldName, value: any) => void;
        setCreateCrmFormValues: (values: DeepPartial<CreateFormRequest>) => void;
        setCreateCrmFormManualErrors: (errors: Record<string, any>) => void;
        touchCreateCrmFormField: (key: string) => void;
        resetCreateCrmForm: (values?: CreateFormRequest) => void;
        submitCreateCrmForm: () => void;
        submitCreateCrmFormRequest: (createCrmForm: CreateFormRequest) => void;
        submitCreateCrmFormSuccess: (createCrmForm: CreateFormRequest) => void;
        submitCreateCrmFormFailure: (error: Error, errors: Record<string, any>) => void;
    };
    asyncActions: {
        loadForms: () => Promise<any>;
        setCreateCrmFormValue: (key: FieldName, value: any) => Promise<any>;
        setCreateCrmFormValues: (values: DeepPartial<CreateFormRequest>) => Promise<any>;
        setCreateCrmFormManualErrors: (errors: Record<string, any>) => Promise<any>;
        touchCreateCrmFormField: (key: string) => Promise<any>;
        resetCreateCrmForm: (values?: CreateFormRequest) => Promise<any>;
        submitCreateCrmForm: () => Promise<any>;
        submitCreateCrmFormRequest: (createCrmForm: CreateFormRequest) => Promise<any>;
        submitCreateCrmFormSuccess: (createCrmForm: CreateFormRequest) => Promise<any>;
        submitCreateCrmFormFailure: (error: Error, errors: Record<string, any>) => Promise<any>;
    };
    defaults: {
        createCrmForm: CreateFormRequest;
        isCreateCrmFormSubmitting: boolean;
        showCreateCrmFormErrors: boolean;
        createCrmFormChanged: boolean;
        createCrmFormTouches: Record<string, boolean>;
        createCrmFormManualErrors: Record<string, any>;
    };
    events: {};
    key: undefined;
    listeners: {};
    path: [
        "scenes",
        "forms",
        "create",
        "createFormLogic"
    ];
    pathString: "scenes.forms.create.createFormLogic";
    props: CreateFormProps;
    reducer: (state: any, action: any, fullState: any) => {
        createCrmForm: CreateFormRequest;
        isCreateCrmFormSubmitting: boolean;
        showCreateCrmFormErrors: boolean;
        createCrmFormChanged: boolean;
        createCrmFormTouches: Record<string, boolean>;
        createCrmFormManualErrors: Record<string, any>;
    };
    reducers: {
        createCrmForm: (state: CreateFormRequest, action: any, fullState: any) => CreateFormRequest;
        isCreateCrmFormSubmitting: (state: boolean, action: any, fullState: any) => boolean;
        showCreateCrmFormErrors: (state: boolean, action: any, fullState: any) => boolean;
        createCrmFormChanged: (state: boolean, action: any, fullState: any) => boolean;
        createCrmFormTouches: (state: Record<string, boolean>, action: any, fullState: any) => Record<string, boolean>;
        createCrmFormManualErrors: (state: Record<string, any>, action: any, fullState: any) => Record<string, any>;
    };
    selector: (state: any) => {
        createCrmForm: CreateFormRequest;
        isCreateCrmFormSubmitting: boolean;
        showCreateCrmFormErrors: boolean;
        createCrmFormChanged: boolean;
        createCrmFormTouches: Record<string, boolean>;
        createCrmFormManualErrors: Record<string, any>;
    };
    selectors: {
        createCrmForm: (state: any, props?: any) => CreateFormRequest;
        isCreateCrmFormSubmitting: (state: any, props?: any) => boolean;
        showCreateCrmFormErrors: (state: any, props?: any) => boolean;
        createCrmFormChanged: (state: any, props?: any) => boolean;
        createCrmFormTouches: (state: any, props?: any) => Record<string, boolean>;
        createCrmFormManualErrors: (state: any, props?: any) => Record<string, any>;
        createCrmFormTouched: (state: any, props?: any) => boolean;
        createCrmFormValidationErrors: (state: any, props?: any) => DeepPartialMap<CreateFormRequest, ValidationErrorType>;
        createCrmFormAllErrors: (state: any, props?: any) => Record<string, any>;
        createCrmFormHasErrors: (state: any, props?: any) => boolean;
        createCrmFormErrors: (state: any, props?: any) => DeepPartialMap<CreateFormRequest, ValidationErrorType>;
        isCreateCrmFormValid: (state: any, props?: any) => boolean;
    };
    sharedListeners: {};
    values: {
        createCrmForm: CreateFormRequest;
        isCreateCrmFormSubmitting: boolean;
        showCreateCrmFormErrors: boolean;
        createCrmFormChanged: boolean;
        createCrmFormTouches: Record<string, boolean>;
        createCrmFormManualErrors: Record<string, any>;
        createCrmFormTouched: boolean;
        createCrmFormValidationErrors: DeepPartialMap<CreateFormRequest, ValidationErrorType>;
        createCrmFormAllErrors: Record<string, any>;
        createCrmFormHasErrors: boolean;
        createCrmFormErrors: DeepPartialMap<CreateFormRequest, ValidationErrorType>;
        isCreateCrmFormValid: boolean;
    };
    _isKea: true;
    _isKeaWithKey: false;
}