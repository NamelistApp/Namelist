// Generated by kea-typegen on Sat, 11 Jan 2025 03:33:41 GMT. DO NOT EDIT THIS FILE MANUALLY.

import type { Logic } from 'kea'

import type { Team } from '../domain/types'

export interface teamLogicType extends Logic {
    actionCreators: {
        loadCurrentTeam: () => ({
            type: "load current team (scenes.teamLogic)";
            payload: any;
        });
        loadCurrentTeamSuccess: (currentTeam: Team | null, payload?: any) => ({
            type: "load current team success (scenes.teamLogic)";
            payload: {
                currentTeam: Team | null;
                payload?: any;
            };
        });
        loadCurrentTeamFailure: (error: string, errorObject?: any) => ({
            type: "load current team failure (scenes.teamLogic)";
            payload: {
                error: string;
                errorObject?: any;
            };
        });
    };
    actionKeys: {
        "load current team (scenes.teamLogic)": "loadCurrentTeam";
        "load current team success (scenes.teamLogic)": "loadCurrentTeamSuccess";
        "load current team failure (scenes.teamLogic)": "loadCurrentTeamFailure";
    };
    actionTypes: {
        loadCurrentTeam: "load current team (scenes.teamLogic)";
        loadCurrentTeamSuccess: "load current team success (scenes.teamLogic)";
        loadCurrentTeamFailure: "load current team failure (scenes.teamLogic)";
    };
    actions: {
        loadCurrentTeam: () => void;
        loadCurrentTeamSuccess: (currentTeam: Team | null, payload?: any) => void;
        loadCurrentTeamFailure: (error: string, errorObject?: any) => void;
    };
    asyncActions: {
        loadCurrentTeam: () => Promise<any>;
        loadCurrentTeamSuccess: (currentTeam: Team | null, payload?: any) => Promise<any>;
        loadCurrentTeamFailure: (error: string, errorObject?: any) => Promise<any>;
    };
    defaults: {
        currentTeam: Team | null;
        currentTeamLoading: boolean;
    };
    events: {};
    key: undefined;
    listeners: {
        "loadCurrentTeamSuccess": ((action: {
            type: "load current team success (scenes.teamLogic)";
            payload: {
                currentTeam: Team | null;
                payload?: any;
            };
        }, previousState: any) => void | Promise<void>)[];
    };
    path: [
        "scenes",
        "teamLogic"
    ];
    pathString: "scenes.teamLogic";
    props: Record<string, unknown>;
    reducer: (state: any, action: any, fullState: any) => {
        currentTeam: Team | null;
        currentTeamLoading: boolean;
    };
    reducers: {
        currentTeam: (state: Team | null, action: any, fullState: any) => Team | null;
        currentTeamLoading: (state: boolean, action: any, fullState: any) => boolean;
    };
    selector: (state: any) => {
        currentTeam: Team | null;
        currentTeamLoading: boolean;
    };
    selectors: {
        currentTeam: (state: any, props?: any) => Team | null;
        currentTeamLoading: (state: any, props?: any) => boolean;
        currentTeamId: (state: any, props?: any) => string | null;
    };
    sharedListeners: {};
    values: {
        currentTeam: Team | null;
        currentTeamLoading: boolean;
        currentTeamId: string | null;
    };
    _isKea: true;
    _isKeaWithKey: false;
    __keaTypeGenInternalSelectorTypes: {
        currentTeamId: (currentTeam: Team | null) => string | null;
    };
}