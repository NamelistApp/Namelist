// Generated by kea-typegen on Mon, 23 Dec 2024 23:54:44 GMT. DO NOT EDIT THIS FILE MANUALLY.

import type { Logic } from 'kea'

import type { LoadedScene, Scene, SceneConfig, SceneParams } from './sceneTypes'
import type { LocationChangedPayload } from 'kea-router/lib/types'
import type { BuiltLogic } from 'kea/lib/index'

export interface sceneLogicType extends Logic {
    actionCreators: {
        locationChanged: ({ method, pathname, search, searchParams, hash, hashParams, initial, }: LocationChangedPayload) => ({
            type: "location changed (scenes.sceneLogic)";
            payload: {
                hash: string;
                hashParams: Record<string, any>;
                initial: boolean;
                method: "POP" | "PUSH" | "REPLACE";
                pathname: string;
                search: string;
                searchParams: Record<string, any>;
            };
        });
        openScene: (scene: Scene, params: SceneParams, method: string) => ({
            type: "open scene (scenes.sceneLogic)";
            payload: {
                method: string;
                params: SceneParams;
                scene: Scene;
            };
        });
        loadScene: (scene: Scene, params: SceneParams, method: string) => ({
            type: "load scene (scenes.sceneLogic)";
            payload: {
                method: string;
                params: SceneParams;
                scene: Scene;
            };
        });
        setScene: (scene: Scene, params: SceneParams, scrollToTop?: boolean) => ({
            type: "set scene (scenes.sceneLogic)";
            payload: {
                params: SceneParams;
                scene: Scene;
                scrollToTop: boolean;
            };
        });
        setLoadedScene: (loadedScene: LoadedScene) => ({
            type: "set loaded scene (scenes.sceneLogic)";
            payload: {
                loadedScene: LoadedScene;
            };
        });
        reloadBrowserDueToImportError: () => ({
            type: "reload browser due to import error (scenes.sceneLogic)";
            payload: {
                value: true;
            };
        });
    };
    actionKeys: {
        "location changed (scenes.sceneLogic)": "locationChanged";
        "open scene (scenes.sceneLogic)": "openScene";
        "load scene (scenes.sceneLogic)": "loadScene";
        "set scene (scenes.sceneLogic)": "setScene";
        "set loaded scene (scenes.sceneLogic)": "setLoadedScene";
        "reload browser due to import error (scenes.sceneLogic)": "reloadBrowserDueToImportError";
    };
    actionTypes: {
        locationChanged: "location changed (scenes.sceneLogic)";
        openScene: "open scene (scenes.sceneLogic)";
        loadScene: "load scene (scenes.sceneLogic)";
        setScene: "set scene (scenes.sceneLogic)";
        setLoadedScene: "set loaded scene (scenes.sceneLogic)";
        reloadBrowserDueToImportError: "reload browser due to import error (scenes.sceneLogic)";
    };
    actions: {
        locationChanged: ({ method, pathname, search, searchParams, hash, hashParams, initial, }: LocationChangedPayload) => void;
        openScene: (scene: Scene, params: SceneParams, method: string) => void;
        loadScene: (scene: Scene, params: SceneParams, method: string) => void;
        setScene: (scene: Scene, params: SceneParams, scrollToTop?: boolean) => void;
        setLoadedScene: (loadedScene: LoadedScene) => void;
        reloadBrowserDueToImportError: () => void;
    };
    asyncActions: {
        locationChanged: ({ method, pathname, search, searchParams, hash, hashParams, initial, }: LocationChangedPayload) => Promise<any>;
        openScene: (scene: Scene, params: SceneParams, method: string) => Promise<any>;
        loadScene: (scene: Scene, params: SceneParams, method: string) => Promise<any>;
        setScene: (scene: Scene, params: SceneParams, scrollToTop?: boolean) => Promise<any>;
        setLoadedScene: (loadedScene: LoadedScene) => Promise<any>;
        reloadBrowserDueToImportError: () => Promise<any>;
    };
    defaults: {
        scene: Scene | null;
        loadedScenes: Record<string, LoadedScene>;
        loadingScene: Scene | null;
        lastReloadAt: number | null;
    };
    events: {};
    key: undefined;
    listeners: {
        "openScene": ((action: {
            type: "open scene (scenes.sceneLogic)";
            payload: {
                method: string;
                params: SceneParams;
                scene: Scene;
            };
        }, previousState: any) => void | Promise<void>)[];
        "loadScene": ((action: {
            type: "load scene (scenes.sceneLogic)";
            payload: {
                method: string;
                params: SceneParams;
                scene: Scene;
            };
        }, previousState: any) => void | Promise<void>)[];
        "setScene": ((action: {
            type: "set scene (scenes.sceneLogic)";
            payload: {
                params: SceneParams;
                scene: Scene;
                scrollToTop: boolean;
            };
        }, previousState: any) => void | Promise<void>)[];
        "reloadBrowserDueToImportError": ((action: {
            type: "reload browser due to import error (scenes.sceneLogic)";
            payload: {
                value: true;
            };
        }, previousState: any) => void | Promise<void>)[];
        "locationChanged": ((action: {
            type: "location changed (scenes.sceneLogic)";
            payload: {
                hash: string;
                hashParams: Record<string, any>;
                initial: boolean;
                method: "POP" | "PUSH" | "REPLACE";
                pathname: string;
                search: string;
                searchParams: Record<string, any>;
            };
        }, previousState: any) => void | Promise<void>)[];
    };
    path: [
        "scenes",
        "sceneLogic"
    ];
    pathString: "scenes.sceneLogic";
    props: {
        scenes?: Record<Scene, () => any>;
    };
    reducer: (state: any, action: any, fullState: any) => {
        scene: Scene | null;
        loadedScenes: Record<string, LoadedScene>;
        loadingScene: Scene | null;
        lastReloadAt: number | null;
    };
    reducers: {
        scene: (state: Scene | null, action: any, fullState: any) => Scene | null;
        loadedScenes: (state: Record<string, LoadedScene>, action: any, fullState: any) => Record<string, LoadedScene>;
        loadingScene: (state: Scene | null, action: any, fullState: any) => Scene | null;
        lastReloadAt: (state: number | null, action: any, fullState: any) => number | null;
    };
    selector: (state: any) => {
        scene: Scene | null;
        loadedScenes: Record<string, LoadedScene>;
        loadingScene: Scene | null;
        lastReloadAt: number | null;
    };
    selectors: {
        scene: (state: any, props?: any) => Scene | null;
        loadedScenes: (state: any, props?: any) => Record<string, LoadedScene>;
        loadingScene: (state: any, props?: any) => Scene | null;
        lastReloadAt: (state: any, props?: any) => number | null;
        sceneConfig: (state: any, props?: any) => SceneConfig | null;
        activeScene: (state: any, props?: any) => Scene | null;
        activeLoadedScene: (state: any, props?: any) => LoadedScene | null;
        sceneParams: (state: any, props?: any) => SceneParams;
        activeSceneLogic: (state: any, props?: any) => BuiltLogic | null;
        params: (state: any, props?: any) => Record<string, string>;
        searchParams: (state: any, props?: any) => Record<string, any>;
        hashParams: (state: any, props?: any) => Record<string, any>;
    };
    sharedListeners: {};
    values: {
        scene: Scene | null;
        loadedScenes: Record<string, LoadedScene>;
        loadingScene: Scene | null;
        lastReloadAt: number | null;
        sceneConfig: SceneConfig | null;
        activeScene: Scene | null;
        activeLoadedScene: LoadedScene | null;
        sceneParams: SceneParams;
        activeSceneLogic: BuiltLogic | null;
        params: Record<string, string>;
        searchParams: Record<string, any>;
        hashParams: Record<string, any>;
    };
    _isKea: true;
    _isKeaWithKey: false;
    __keaTypeGenInternalSelectorTypes: {
        sceneConfig: (scene: Scene | null) => SceneConfig | null;
        activeScene: (scene: Scene | null) => Scene | null;
        activeLoadedScene: (activeScene: Scene | null, loadedScenes: Record<string, LoadedScene>) => LoadedScene | null;
        sceneParams: (activeLoadedScene: LoadedScene | null) => SceneParams;
        activeSceneLogic: (activeLoadedScene: LoadedScene | null, sceneParams: SceneParams) => BuiltLogic | null;
        params: (sceneParams: SceneParams) => Record<string, string>;
        searchParams: (sceneParams: SceneParams) => Record<string, any>;
        hashParams: (sceneParams: SceneParams) => Record<string, any>;
    };
}