// Generated by kea-typegen on Wed, 08 Jan 2025 01:10:14 GMT. DO NOT EDIT THIS FILE MANUALLY.

import type { Logic } from 'kea'

import type { Paginated } from '../../domain/api'
import type { Contact } from './data/models'

export interface contactsLogicType extends Logic {
    actionCreators: {
        loadContacts: () => ({
            type: "load contacts (scenes.contacts.contactsLogic)";
            payload: any;
        });
        loadContactsSuccess: (contacts: Paginated<Contact>, payload?: any) => ({
            type: "load contacts success (scenes.contacts.contactsLogic)";
            payload: {
                contacts: Paginated<Contact>;
                payload?: any;
            };
        });
        loadContactsFailure: (error: string, errorObject?: any) => ({
            type: "load contacts failure (scenes.contacts.contactsLogic)";
            payload: {
                error: string;
                errorObject?: any;
            };
        });
    };
    actionKeys: {
        "load contacts (scenes.contacts.contactsLogic)": "loadContacts";
        "load contacts success (scenes.contacts.contactsLogic)": "loadContactsSuccess";
        "load contacts failure (scenes.contacts.contactsLogic)": "loadContactsFailure";
    };
    actionTypes: {
        loadContacts: "load contacts (scenes.contacts.contactsLogic)";
        loadContactsSuccess: "load contacts success (scenes.contacts.contactsLogic)";
        loadContactsFailure: "load contacts failure (scenes.contacts.contactsLogic)";
    };
    actions: {
        loadContacts: () => void;
        loadContactsSuccess: (contacts: Paginated<Contact>, payload?: any) => void;
        loadContactsFailure: (error: string, errorObject?: any) => void;
    };
    asyncActions: {
        loadContacts: () => Promise<any>;
        loadContactsSuccess: (contacts: Paginated<Contact>, payload?: any) => Promise<any>;
        loadContactsFailure: (error: string, errorObject?: any) => Promise<any>;
    };
    defaults: {
        contacts: Paginated<Contact>;
        page: number;
        contactsLoading: boolean;
    };
    events: {};
    key: undefined;
    listeners: {};
    path: [
        "scenes",
        "contacts",
        "contactsLogic"
    ];
    pathString: "scenes.contacts.contactsLogic";
    props: Record<string, unknown>;
    reducer: (state: any, action: any, fullState: any) => {
        contacts: Paginated<Contact>;
        page: number;
        contactsLoading: boolean;
    };
    reducers: {
        contacts: (state: Paginated<Contact>, action: any, fullState: any) => Paginated<Contact>;
        page: (state: number, action: any, fullState: any) => number;
        contactsLoading: (state: boolean, action: any, fullState: any) => boolean;
    };
    selector: (state: any) => {
        contacts: Paginated<Contact>;
        page: number;
        contactsLoading: boolean;
    };
    selectors: {
        contacts: (state: any, props?: any) => Paginated<Contact>;
        page: (state: any, props?: any) => number;
        contactsLoading: (state: any, props?: any) => boolean;
    };
    sharedListeners: {};
    values: {
        contacts: Paginated<Contact>;
        page: number;
        contactsLoading: boolean;
    };
    _isKea: true;
    _isKeaWithKey: false;
}