// Generated by kea-typegen on Wed, 08 Jan 2025 13:19:14 GMT. DO NOT EDIT THIS FILE MANUALLY.

import type { Logic } from 'kea'

import type { ContactLogicProps } from './contactLogic'
import type { Contact } from './data/models'

export interface contactLogicType extends Logic {
    actionCreators: {
        loadContact: (contactId?: any) => ({
            type: "load contact (src.scenes.contacts.contactLogic.*)";
            payload: any;
        });
        loadContactSuccess: (contact: Contact, payload?: any) => ({
            type: "load contact success (src.scenes.contacts.contactLogic.*)";
            payload: {
                contact: Contact;
                payload?: any;
            };
        });
        loadContactFailure: (error: string, errorObject?: any) => ({
            type: "load contact failure (src.scenes.contacts.contactLogic.*)";
            payload: {
                error: string;
                errorObject?: any;
            };
        });
    };
    actionKeys: {
        "load contact (src.scenes.contacts.contactLogic.*)": "loadContact";
        "load contact success (src.scenes.contacts.contactLogic.*)": "loadContactSuccess";
        "load contact failure (src.scenes.contacts.contactLogic.*)": "loadContactFailure";
    };
    actionTypes: {
        loadContact: "load contact (src.scenes.contacts.contactLogic.*)";
        loadContactSuccess: "load contact success (src.scenes.contacts.contactLogic.*)";
        loadContactFailure: "load contact failure (src.scenes.contacts.contactLogic.*)";
    };
    actions: {
        loadContact: (contactId?: any) => void;
        loadContactSuccess: (contact: Contact, payload?: any) => void;
        loadContactFailure: (error: string, errorObject?: any) => void;
    };
    asyncActions: {
        loadContact: (contactId?: any) => Promise<any>;
        loadContactSuccess: (contact: Contact, payload?: any) => Promise<any>;
        loadContactFailure: (error: string, errorObject?: any) => Promise<any>;
    };
    defaults: {
        contact: Contact;
        contactLoading: boolean;
    };
    events: {};
    key: number;
    listeners: {
        "loadContactFailure": ((action: {
            type: "load contact failure (src.scenes.contacts.contactLogic.*)";
            payload: {
                error: string;
                errorObject?: any;
            };
        }, previousState: any) => void | Promise<void>)[];
    };
    path: [
        "src",
        "scenes",
        "contacts",
        "contactLogic",
        "*"
    ];
    pathString: "src.scenes.contacts.contactLogic.*";
    props: ContactLogicProps;
    reducer: (state: any, action: any, fullState: any) => {
        contact: Contact;
        contactLoading: boolean;
    };
    reducers: {
        contact: (state: Contact, action: any, fullState: any) => Contact;
        contactLoading: (state: boolean, action: any, fullState: any) => boolean;
    };
    selector: (state: any) => {
        contact: Contact;
        contactLoading: boolean;
    };
    selectors: {
        contact: (state: any, props?: any) => Contact;
        contactLoading: (state: any, props?: any) => boolean;
        contactId: (state: any, props?: any) => number;
    };
    sharedListeners: {};
    values: {
        contact: Contact;
        contactLoading: boolean;
        contactId: number;
    };
    _isKea: true;
    _isKeaWithKey: true;
    __keaTypeGenInternalSelectorTypes: {
        contactId: (arg: any) => number;
    };
}