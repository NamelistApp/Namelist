// Generated by kea-typegen on Tue, 31 Dec 2024 17:56:21 GMT. DO NOT EDIT THIS FILE MANUALLY.

import type { Logic } from 'kea'

import type { User } from '../../domain/types'
import type { ServerLoginError } from './loginLogic'
import type { LoginRequest } from './AuthApiClient'
import type { DeepPartial, DeepPartialMap, FieldName, ValidationErrorType } from 'kea-forms'

export interface loginLogicType extends Logic {
    actionCreators: {
        loadUserSuccess: (user: User | null, payload?: {}) => ({
            type: "load user success (scenes.auth.loginLogic)";
            payload: {
                payload?: {};
                user: User | null;
            };
        });
        loginWithGoogle: () => ({
            type: "login with google (scenes.auth.loginLogic)";
            payload: {
                value: true;
            };
        });
        setLoginFormValue: (key: FieldName, value: any) => ({
            type: "set login form value (scenes.auth.loginLogic)";
            payload: {
                name: FieldName;
                value: any;
            };
        });
        setLoginFormValues: (values: DeepPartial<LoginRequest>) => ({
            type: "set login form values (scenes.auth.loginLogic)";
            payload: {
                values: DeepPartial<LoginRequest>;
            };
        });
        setLoginFormManualErrors: (errors: Record<string, any>) => ({
            type: "set login form manual errors (scenes.auth.loginLogic)";
            payload: {
                errors: Record<string, any>;
            };
        });
        touchLoginFormField: (key: string) => ({
            type: "touch login form field (scenes.auth.loginLogic)";
            payload: {
                key: string;
            };
        });
        resetLoginForm: (values?: LoginRequest) => ({
            type: "reset login form (scenes.auth.loginLogic)";
            payload: {
                values?: LoginRequest;
            };
        });
        submitLoginForm: () => ({
            type: "submit login form (scenes.auth.loginLogic)";
            payload: {
                value: boolean;
            };
        });
        submitLoginFormRequest: (loginForm: LoginRequest) => ({
            type: "submit login form request (scenes.auth.loginLogic)";
            payload: {
                loginForm: LoginRequest;
            };
        });
        submitLoginFormSuccess: (loginForm: LoginRequest) => ({
            type: "submit login form success (scenes.auth.loginLogic)";
            payload: {
                loginForm: LoginRequest;
            };
        });
        submitLoginFormFailure: (error: Error, errors: Record<string, any>) => ({
            type: "submit login form failure (scenes.auth.loginLogic)";
            payload: {
                error: Error;
                errors: Record<string, any>;
            };
        });
    };
    actionKeys: {
        "load user success (scenes.auth.loginLogic)": "loadUserSuccess";
        "login with google (scenes.auth.loginLogic)": "loginWithGoogle";
        "set login form value (scenes.auth.loginLogic)": "setLoginFormValue";
        "set login form values (scenes.auth.loginLogic)": "setLoginFormValues";
        "set login form manual errors (scenes.auth.loginLogic)": "setLoginFormManualErrors";
        "touch login form field (scenes.auth.loginLogic)": "touchLoginFormField";
        "reset login form (scenes.auth.loginLogic)": "resetLoginForm";
        "submit login form (scenes.auth.loginLogic)": "submitLoginForm";
        "submit login form request (scenes.auth.loginLogic)": "submitLoginFormRequest";
        "submit login form success (scenes.auth.loginLogic)": "submitLoginFormSuccess";
        "submit login form failure (scenes.auth.loginLogic)": "submitLoginFormFailure";
    };
    actionTypes: {
        loadUserSuccess: "load user success (scenes.auth.loginLogic)";
        loginWithGoogle: "login with google (scenes.auth.loginLogic)";
        setLoginFormValue: "set login form value (scenes.auth.loginLogic)";
        setLoginFormValues: "set login form values (scenes.auth.loginLogic)";
        setLoginFormManualErrors: "set login form manual errors (scenes.auth.loginLogic)";
        touchLoginFormField: "touch login form field (scenes.auth.loginLogic)";
        resetLoginForm: "reset login form (scenes.auth.loginLogic)";
        submitLoginForm: "submit login form (scenes.auth.loginLogic)";
        submitLoginFormRequest: "submit login form request (scenes.auth.loginLogic)";
        submitLoginFormSuccess: "submit login form success (scenes.auth.loginLogic)";
        submitLoginFormFailure: "submit login form failure (scenes.auth.loginLogic)";
    };
    actions: {
        loadUserSuccess: (user: User | null, payload?: {}) => void;
        loginWithGoogle: () => void;
        setLoginFormValue: (key: FieldName, value: any) => void;
        setLoginFormValues: (values: DeepPartial<LoginRequest>) => void;
        setLoginFormManualErrors: (errors: Record<string, any>) => void;
        touchLoginFormField: (key: string) => void;
        resetLoginForm: (values?: LoginRequest) => void;
        submitLoginForm: () => void;
        submitLoginFormRequest: (loginForm: LoginRequest) => void;
        submitLoginFormSuccess: (loginForm: LoginRequest) => void;
        submitLoginFormFailure: (error: Error, errors: Record<string, any>) => void;
    };
    asyncActions: {
        loadUserSuccess: (user: User | null, payload?: {}) => Promise<any>;
        loginWithGoogle: () => Promise<any>;
        setLoginFormValue: (key: FieldName, value: any) => Promise<any>;
        setLoginFormValues: (values: DeepPartial<LoginRequest>) => Promise<any>;
        setLoginFormManualErrors: (errors: Record<string, any>) => Promise<any>;
        touchLoginFormField: (key: string) => Promise<any>;
        resetLoginForm: (values?: LoginRequest) => Promise<any>;
        submitLoginForm: () => Promise<any>;
        submitLoginFormRequest: (loginForm: LoginRequest) => Promise<any>;
        submitLoginFormSuccess: (loginForm: LoginRequest) => Promise<any>;
        submitLoginFormFailure: (error: Error, errors: Record<string, any>) => Promise<any>;
    };
    defaults: {
        loginForm: LoginRequest;
        isLoginFormSubmitting: boolean;
        showLoginFormErrors: boolean;
        loginFormChanged: boolean;
        loginFormTouches: Record<string, boolean>;
        loginFormManualErrors: Record<string, any>;
    };
    events: {};
    key: undefined;
    listeners: {
        "loginWithGoogle": ((action: {
            type: "login with google (scenes.auth.loginLogic)";
            payload: {
                value: true;
            };
        }, previousState: any) => void | Promise<void>)[];
        "loadUserSuccess": ((action: {
            type: "load user success (scenes.auth.loginLogic)";
            payload: {
                payload?: {};
                user: User | null;
            };
        }, previousState: any) => void | Promise<void>)[];
    };
    path: [
        "scenes",
        "auth",
        "loginLogic"
    ];
    pathString: "scenes.auth.loginLogic";
    props: Record<string, unknown>;
    reducer: (state: any, action: any, fullState: any) => {
        loginForm: LoginRequest;
        isLoginFormSubmitting: boolean;
        showLoginFormErrors: boolean;
        loginFormChanged: boolean;
        loginFormTouches: Record<string, boolean>;
        loginFormManualErrors: Record<string, any>;
    };
    reducers: {
        loginForm: (state: LoginRequest, action: any, fullState: any) => LoginRequest;
        isLoginFormSubmitting: (state: boolean, action: any, fullState: any) => boolean;
        showLoginFormErrors: (state: boolean, action: any, fullState: any) => boolean;
        loginFormChanged: (state: boolean, action: any, fullState: any) => boolean;
        loginFormTouches: (state: Record<string, boolean>, action: any, fullState: any) => Record<string, boolean>;
        loginFormManualErrors: (state: Record<string, any>, action: any, fullState: any) => Record<string, any>;
    };
    selector: (state: any) => {
        loginForm: LoginRequest;
        isLoginFormSubmitting: boolean;
        showLoginFormErrors: boolean;
        loginFormChanged: boolean;
        loginFormTouches: Record<string, boolean>;
        loginFormManualErrors: Record<string, any>;
    };
    selectors: {
        loginForm: (state: any, props?: any) => LoginRequest;
        isLoginFormSubmitting: (state: any, props?: any) => boolean;
        showLoginFormErrors: (state: any, props?: any) => boolean;
        loginFormChanged: (state: any, props?: any) => boolean;
        loginFormTouches: (state: any, props?: any) => Record<string, boolean>;
        loginFormManualErrors: (state: any, props?: any) => Record<string, any>;
        serverLoginError: (state: any, props?: any) => ServerLoginError;
        loginFormTouched: (state: any, props?: any) => boolean;
        loginFormValidationErrors: (state: any, props?: any) => DeepPartialMap<LoginRequest, ValidationErrorType>;
        loginFormAllErrors: (state: any, props?: any) => Record<string, any>;
        loginFormHasErrors: (state: any, props?: any) => boolean;
        loginFormErrors: (state: any, props?: any) => DeepPartialMap<LoginRequest, ValidationErrorType>;
        isLoginFormValid: (state: any, props?: any) => boolean;
    };
    sharedListeners: {};
    values: {
        loginForm: LoginRequest;
        isLoginFormSubmitting: boolean;
        showLoginFormErrors: boolean;
        loginFormChanged: boolean;
        loginFormTouches: Record<string, boolean>;
        loginFormManualErrors: Record<string, any>;
        serverLoginError: ServerLoginError;
        loginFormTouched: boolean;
        loginFormValidationErrors: DeepPartialMap<LoginRequest, ValidationErrorType>;
        loginFormAllErrors: Record<string, any>;
        loginFormHasErrors: boolean;
        loginFormErrors: DeepPartialMap<LoginRequest, ValidationErrorType>;
        isLoginFormValid: boolean;
    };
    _isKea: true;
    _isKeaWithKey: false;
}